from __future__ import annotations

from pathlib import Path
from typing import Iterable

from click.testing import CliRunner

from cli.zte import cli as root_cli


def _run_help(runner: CliRunner, args: Iterable[str]) -> str:
    result = runner.invoke(root_cli, list(args))
    if result.exception:
        raise RuntimeError(f"Failed to get help for {args}: {result.exception}\n{result.output}")
    return result.output.rstrip()


def main() -> Path:
    runner = CliRunner()

    sections: list[tuple[str, str]] = []
    sections.append(("zte --help", _run_help(runner, ["--help"])))

    for name in sorted(root_cli.commands.keys()):
        sections.append((f"zte {name} --help", _run_help(runner, [name, "--help"])))

    lines: list[str] = []
    lines.append("# ZTE CLI Reference")
    lines.append("")
    lines.append("_Auto-generated by tools.cli_docs. Do not edit by hand._")
    lines.append("")
    for title, help_text in sections:
        lines.append(f"## {title}")
        lines.append("")
        lines.append("```text")
        lines.append(help_text)
        lines.append("```")
        lines.append("")

    # Write under current working directory to keep usage simple
    docs_path = Path.cwd() / "docs" / "cli.md"
    docs_path.parent.mkdir(parents=True, exist_ok=True)
    docs_path.write_text("\n".join(lines), encoding="utf-8")
    return docs_path


if __name__ == "__main__":
    out = main()
    print(f"Wrote CLI docs to: {out}")

