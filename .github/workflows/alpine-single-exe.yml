name: build-alpine-single-exe

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
  workflow_dispatch:

env:
  APP_NAME: zte                   # výsledná binárka bude dist/bin/zte
  PY_VER: "3.12"                  # cílový Python
  # používáme console_script entry point definovaný v pyproject.toml
  EXEC_ENTRYPOINT: cli.zte:cli    # odpovídá [project.scripts].zte = "cli.zte:cli"

jobs:
  build:
    name: Alpine musl build (x86_64)
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    defaults:
      run:
        shell: sh
    steps:
      - name: Prepare Alpine toolchain
        run: |
          apk add --no-cache \
            bash curl git ca-certificates \
            build-base pkgconfig \
            rust cargo \
            openssl-dev zlib-dev xz zstd

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # make uv available in this step and the next ones
          export PATH="${HOME}/.local/bin:${PATH}"
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          uv --version

      - name: Lock & sync deps
        run: |
          # vytvoří řízené prostředí a nainstaluje závislosti dle pyproject.toml
          uv sync --python ${PY_VER}
          # volitelně: spusť testy v izolovaném prostředí
          # uv run -m pytest

      - name: Build wheel/sdist
        run: |
          uv build --wheel --sdist
          ls -lah dist

      - name: Resolve wheel path
        id: wheel
        run: |
          # vyber nejnovější wheel balíček projektu
          WHEEL=$(ls -t dist/*.whl | head -n1)
          # převeď na absolutní cestu, aby fungovala i z .pyapp
          case "$WHEEL" in
            /*) WHEEL_ABS="$WHEEL" ;;
            *)  WHEEL_ABS="$(pwd)/$WHEEL" ;;
          esac
          echo "wheel=${WHEEL_ABS}" >> "$GITHUB_OUTPUT"
          echo "Found wheel: ${WHEEL_ABS}"

      - name: Download PyApp source release
        run: |
          mkdir -p .pyapp && cd .pyapp
          curl -L https://github.com/ofek/pyapp/releases/latest/download/source.tar.gz -o source.tar.gz
          tar -xzf source.tar.gz --strip-components=1
          # sanity check
          [ -f Cargo.toml ] || (echo "PyApp source missing" && exit 1)

      - name: Configure PyApp env (embed Python + project)
        env:
          WHEEL: ${{ steps.wheel.outputs.wheel }}
        run: |
          # Persist variables for subsequent steps via GitHub Actions env file
          echo "PYAPP_PROJECT_PATH=${WHEEL}" >> $GITHUB_ENV
          # Derive project name and version from pyproject.toml
          PROJ_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' pyproject.toml | head -n1)
          PROJ_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' pyproject.toml | head -n1)
          # Fallback to names from wheel if parsing failed
          if [ -z "$PROJ_NAME" ]; then
            PROJ_NAME=$(basename "$WHEEL" | sed 's/-[0-9].*//')
          fi
          if [ -z "$PROJ_VERSION" ]; then
            PROJ_VERSION=$(basename "$WHEEL" | sed 's/^[^-]*-//' | cut -d'-' -f1)
          fi
          echo "PYAPP_PROJECT_NAME=${PROJ_NAME}" >> $GITHUB_ENV
          echo "PYAPP_PROJECT_VERSION=${PROJ_VERSION}" >> $GITHUB_ENV
          echo "PYAPP_EXEC_ENTRYPOINT=${EXEC_ENTRYPOINT}" >> $GITHUB_ENV
          echo "PYAPP_DISTRIBUTION_EMBED=1" >> $GITHUB_ENV
          echo "PYAPP_PYTHON_VERSION=${PY_VER}" >> $GITHUB_ENV
          echo "PYAPP_UV_ENABLED=1" >> $GITHUB_ENV
          # To fully skip install on first run (when embedding a full env), uncomment:
          # echo "PYAPP_SKIP_INSTALL=1" >> $GITHUB_ENV
          # CPU variant example (default v3):
          # echo "PYAPP_DISTRIBUTION_VARIANT_CPU=v3" >> $GITHUB_ENV
          # Alternative: run module instead of entrypoint
          # echo "PYAPP_EXEC_MODULE=cli.zte" >> $GITHUB_ENV

          # Show which variables are set
          echo "Configured PYAPP_* variables:"
          ( set -o posix ; set ) | grep '^PYAPP_' | sed 's/=.*//' | sort

      - name: Build PyApp (musl target)
        working-directory: .pyapp
        run: |
          # build uvnitř Alpine => implicitně musl (x86_64-unknown-linux-musl)
          cargo build --release
          mkdir -p ../dist/bin
          cp target/release/pyapp "../dist/bin/${APP_NAME}"
          chmod +x "../dist/bin/${APP_NAME}"
          ls -lah ../dist/bin

      - name: Smoke test (no network)
        run: |
          # volitelně: ověření, že binárka startuje i bez sítě
          # pokud nepoužíváš PYAPP_SKIP_INSTALL=1 a nejsou embednuty závislosti, první run může vyžadovat síť
          "./dist/bin/${APP_NAME}" --help || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-alpine-x86_64
          path: dist/bin/${{ env.APP_NAME }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-alpine-x86_64
          path: ./release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release/${{ env.APP_NAME }}
          generate_release_notes: true
